blkhr.df$Year <- factor(blk.hr$year, levels=sort(unique(blk.hr$year), decreasing=T))
# put cumulative total hrs  and nocturnal hrs on plot
txt <- paste("Total cumulative hours: ", round(total.hr,1), "\n",
"Total nocturnal hours: ", round(noc.hr,2),sep="")
grob <- grobTree(textGrob(txt, x=0.1,  y=0.92, hjust=0,
gp=gpar(col="black", fontsize=10, fontface="italic")))				# font size
hr.plt <- ggplot(blkhr.df, aes(fill=Year, y=value, x=month) ) +
geom_bar(position="stack", stat="identity") +
scale_fill_brewer(palette="Accent") +
labs(x="Month", y="Hours", title="Survey Hours") +
theme(axis.text=element_text(size=11), axis.title=element_text(size=12),	# font size
plot.title=element_text(size=12,face="bold")) +				# font size
annotation_custom(grob)
shiny::runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
View(block_hrs)
View(block_hrs)
# N. Tarr, 4/2/2022
#
# Example script showing how to use the ncba_functions.
blocks.path <- "~/Datasets/ncba_blocks.shp"
library(tmap)
library(hms)
library(hms)
# N. Tarr, 4/2/2022
#
# Example script showing how to use the ncba_functions.
blocks.path <- "~/Datasets/ncba_blocks.shp"
config <- "~/Documents/NCBA/Scripts/ncba_config.R"
setwd("~/Code/NCBA/resources")
source("ncba_functions.R")
setwd("~/Documents/NCBA/Workspace/")
library(tidyverse)
library(tmap)
library(hms)
library(sf)
# Import the atlas functions
setwd("~/Code/NCBA/resources")
source("ncba_functions.R")
# Identify location of config file
config <- "~/Documents/NCBA/Scripts/ncba_config.R"
# Set a working environment
setwd("~/Documents/NCBA/species/")
# WHAT SPECIES? ----------------------------------------------------------------
species <- "American Bittern"
# GET NCBA DATA ----------------------------------------------------------------
# connect to a specific collection (table)
connection <- connect_ncba_db(ncba_config = config, database = "ebd_mgmt",
collection = "ebd")
# execute a query
query <- str_interp('{"OBSERVATIONS.COMMON_NAME":"${species}"}')
nc_data <- connection$find(query) %>%
unnest(cols = (c(OBSERVATIONS))) %>% # Expand observations
filter(COMMON_NAME == species)
# format columns
sp_df <- to_ebd_format(nc_data, drop=FALSE)
# !!!!!!!!!!!!!!!!! handle shared checklist duplication  # DEVELOP THIS !!!!!!!!!!!!!!!!!!!!!!!!!!
#sp_df2 <- auk_ebd(x=sp_df)
# PLOT BREEDING CODES ----------------------------------------------------------
lump <- list(S = c("S", "S7", "M"), O = c("", "F", "O", "NC"))
no_plot_codes <- NULL
out_pdf <- "~/Documents/NCBA/test.pdf"
breeding_boxplot(species, sp_df, pallet="Paired", out_pdf=NULL,
no_plot_codes=no_plot_codes, lump=lump, drop=TRUE)
# PLOT COORDINATES OF RECORDS --------------------------------------------------
plot(plot_checklists_coords(sp_df))
# SUMMARIZE START TIMES --------------------------------------------------------
#plot(start_time_boxplot(sp_df))
# SUMMARIZE TRAVEL DISTANCE ----------------------------------------------------
plot(effort_distance_boxplot(sp_df))
# SUMMARIZE MINUTES EFFORT -----------------------------------------------------
plot(duration_minutes_boxplot(sp_df))
# LOCALITY TYPE BREAKDOWN ------------------------------------------------------
plot(locality_type_pie(sp_df))
# PLOT SIMPLE FEATURES ---------------------------------------------------------
sf <- records_as_sf(records_df=sp_df, kind="observations",
method="point-radius")
# Make a crude plot
plot(select(sf, c(sampling_event_identifier, geometry)))
# OBSERVATION PER BLOCK ----------------------------------------------
blocks.path <- "/Volumes/nmtarr1/Datasets/ncba_blocks.shp"
blocks <- st_read(blocks.path) %>% st_transform(6542) # Correct projection???????????
priority.n.B <- observations_per_block(records_df=sp_df, blocks_sf=blocks,
method="B")
priority.n.D <- observations_per_block(records_df=sp_df, blocks_sf=blocks,
method="D")
# Isolate priority blocks with fewer than 10 checklists
high.priority.B <- priority.n.B %>%
filter(priority == 1, individuals <= 0)
high.priority.D <- priority.n.D %>%
filter(priority == 1, individuals <= 0)
# Plot the map
tmap_mode("view")
tm_shape(priority.n.D) +
tm_fill(col = "individuals", palette = "Reds", style="fixed", alpha = .7,
breaks = c(0, 1, 2, 3, 5, 10, 1000), as.count = TRUE) +
tm_shape(priority.n.B) +
tm_fill(col = "individuals", palette = "Blues", style="fixed", alpha = .7,
breaks = c(0, 1, 2, 3, 5, 10, 1000), as.count = TRUE) +
tm_shape(high.priority.B) +
tm_fill(col = "individuals", style = "cat", palette=c("red","yellow")) +
tm_shape(high.priority.D) +
tm_fill(col = "individuals", style = "cat", palette=c("blue","green")) +
tm_borders()
pipeline <- str_interp('[{ "$match": { "OBSERVATIONS.COMMON_NAME": "${spp}" } }, { "$unwind": { path: "$OBSERVATIONS" } }, { "$project": { "COMMON_NAME": "$OBSERVATIONS.COMMON_NAME", "BREEDING_CODE": "$OBSERVATIONS.BREEDING_CODE", "OBSERVATION_DATE": 1 } }, { "$lookup": { "from": "safe_dates", "localField": "COMMON_NAME", "foreignField": "COMMON_NAME", "as": "SPP_SAFE_DATES" } }, { "$unwind": { "path": "$SPP_SAFE_DATES" } }, { "$project": { "COMMON_NAME": 1, "BREEDING_CODE": 1, "OBSERVATION_DATE": 1, "SEASON": { "$cond": { "if": { "$and": [ { "$gte": [ "$OBSERVATION_DATE", "$SPP_SAFE_DATES.B_SAFE_START_DATE" ] }, { "$lte": [ "$OBSERVATION_DATE", "$SPP_SAFE_DATES.B_SAFE_END_DATE" ] } ] }, "then": "Breeding", "else": "Non-Breeding" } } } }]')
if(!require(shiny)) install.packages("shiny", repos = "http://cran.us.r-project.org")
if(!require(shinyWidgets)) install.packages("shinyWidgets", repos = "http://cran.us.r-project.org")
if(!require(tidyverse)) install.packages("tidyverse", repos = "http://cran.us.r-project.org")
if(!require(mongolite)) install.packages("mongolite", repos = "http://cran.us.r-project.org")
if(!require(dplyr)) install.packages("dplyr", repos = "http://cran.us.r-project.org")
if(!require(leaflet)) install.packages("leaflet", repos = "http://cran.us.r-project.org")
if(!require(htmltools)) install.packages("htmltools", repos = "http://cran.us.r-project.org")
#if(!require(geojsonio)) install.packages("geojsonio", repos = "http://cran.us.r-project.org")
if(!require(shinythemes)) install.packages("shinythemes", repos = "http://cran.us.r-project.org")
if(!require(shinyBS)) install.packages("shinyBS", repos = "http://cran.us.r-project.org") #adds functions for tooltips
#libraries for spp data
if(!require(lubridate)) install.packages("lubridate", repos = "http://cran.us.r-project.org")
if(!require(grid)) install.packages("grid", repos = "http://cran.us.r-project.org")
if(!require(gridBase)) install.packages("gridBase", repos = "http://cran.us.r-project.org")
if(!require(RColorBrewer)) install.packages("RColorBrewer", repos = "http://cran.us.r-project.org")
pipeline <- str_interp('[{ "$match": { "OBSERVATIONS.COMMON_NAME": "${spp}" } }, { "$unwind": { path: "$OBSERVATIONS" } }, { "$project": { "COMMON_NAME": "$OBSERVATIONS.COMMON_NAME", "BREEDING_CODE": "$OBSERVATIONS.BREEDING_CODE", "OBSERVATION_DATE": 1 } }, { "$lookup": { "from": "safe_dates", "localField": "COMMON_NAME", "foreignField": "COMMON_NAME", "as": "SPP_SAFE_DATES" } }, { "$unwind": { "path": "$SPP_SAFE_DATES" } }, { "$project": { "COMMON_NAME": 1, "BREEDING_CODE": 1, "OBSERVATION_DATE": 1, "SEASON": { "$cond": { "if": { "$and": [ { "$gte": [ "$OBSERVATION_DATE", "$SPP_SAFE_DATES.B_SAFE_START_DATE" ] }, { "$lte": [ "$OBSERVATION_DATE", "$SPP_SAFE_DATES.B_SAFE_END_DATE" ] } ] }, "then": "Breeding", "else": "Non-Breeding" } } } }]')
spp <- "Alder Flycatcher"
pipeline <- str_interp('[{ "$match": { "OBSERVATIONS.COMMON_NAME": "${spp}" } }, { "$unwind": { path: "$OBSERVATIONS" } }, { "$project": { "COMMON_NAME": "$OBSERVATIONS.COMMON_NAME", "BREEDING_CODE": "$OBSERVATIONS.BREEDING_CODE", "OBSERVATION_DATE": 1 } }, { "$lookup": { "from": "safe_dates", "localField": "COMMON_NAME", "foreignField": "COMMON_NAME", "as": "SPP_SAFE_DATES" } }, { "$unwind": { "path": "$SPP_SAFE_DATES" } }, { "$project": { "COMMON_NAME": 1, "BREEDING_CODE": 1, "OBSERVATION_DATE": 1, "SEASON": { "$cond": { "if": { "$and": [ { "$gte": [ "$OBSERVATION_DATE", "$SPP_SAFE_DATES.B_SAFE_START_DATE" ] }, { "$lte": [ "$OBSERVATION_DATE", "$SPP_SAFE_DATES.B_SAFE_END_DATE" ] } ] }, "then": "Breeding", "else": "Non-Breeding" } } } }]')
pipeline
source("utils.r") #utilities file
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
shiny::runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
exit
quit()
shiny::runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp()
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
shiny::runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
install.packages("languageserver")
install.packages("investr")
shiny::runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
install.packages("languageserver")
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
shiny::runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
shiny::runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
shiny::runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
install.packages("reactlog")
shiny::runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
shiny::runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp()
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
shiny::runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
eixt
shiny::runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
install.packages("tidyverse", repos = "http://cran.us.r-project.org")
install.packages("tidyverse", repos = "http://cran.us.r-project.org")
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
install.packages("auk")
install.packages("knitr")
install.packages("rlang")
install.packages(c("shiny", "shinyBS", "shinytest", "shinyWidgets", "sourcetools"))
shiny::runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
install.packages("magrittr")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("tidyverse")
install.packages("cli")
install.packages("cli")
.libPaths()
install.packages("cli")
install.packages(c("backports", "bit", "blob", "bslib", "cachem", "callr", "classInt", "clipr", "collections", "colorspace", "commonmark", "countrycode", "cpp11", "crayon", "crul", "curl", "data.table", "DBI", "deldir", "desc", "digest", "e1071", "ebirdst", "fansi", "farver", "fastmap", "fs", "generics", "geojsonio", "geojsonsf", "geometries", "ggiraph", "ggmap", "glue", "httpuv", "interp", "jpeg", "jqr", "jsonify", "jsonlite", "languageserver", "later", "lwgeom", "maps", "maptools", "markdown", "mime", "mongolite", "openssl", "packrat", "parsedate", "pingr", "pkgload", "plotly", "plyr", "png", "precrec", "PresenceAbsence", "processx", "protolite", "proxy", "ps", "raster", "Rcpp", "rgdal", "rgeos", "rjson", "roxygen2", "rprojroot", "rsconnect", "RSQLite", "s2", "sass", "sf", "sfheaders", "sp", "spatstat.data", "spatstat.geom", "spatstat.random", "spatstat.utils", "stars", "stringi", "styler", "suncalc", "sys", "systemfonts", "terra", "testthat", "triebeard", "tzdb", "units", "utf8", "uuid", "V8", "vctrs", "viridis", "waldo", "wk", "XML", "xml2"))
shiny::runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
install.packages("collections")
install.packages("jsonlite")
install.packages("languageserver")
install.packages("mongolite")
install.packages("processx")
install.packages(c("ps", "stringi", "terra", "xml2"))
install.packages("terra")
install.packages("terra")
install.packages("terra")
install.packages("terra")
install.packages("jsonlite")
install.packages("terra")
shiny::runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
install.packages("waffle")
shiny::runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
knitr::opts_chunk$set(
echo = TRUE,
warning = FALSE,
message = FALSE)
knitr::opts_knit$set(root.dir = '~/Documents/NCBA/species/')
breeding_boxplot
library(tidyverse)
setwd("~/Code/NCBA/resources")
--
title: "Breeding Boxplot Function"
author: "N.M. Tarr"
output:
html_document:
df_print: paged
code_folding: hide
rmdformats::downcute:
---
```{r setup, include=TRUE, message=TRUE, warning=TRUE}
knitr::opts_chunk$set(
echo = TRUE,
warning = FALSE,
message = FALSE)
knitr::opts_knit$set(root.dir = '~/Documents/NCBA/species/')
```
This demo requires the tidyverse packages.
```{r}
library(tidyverse)
```
Load the NCBA functions because this function relies upon the output from some of them.
```{r}
setwd("~/Code/NCBA/resources")
source("ncba_functions.R")
config <- "~/Documents/NCBA/Scripts/ncba_config.R"
```
# Purpose
This document details a function that generates a boxplot of breeding codes with some customization options and supports the ability to view the checklist behind individual data points by clicking on them in the figure.  The function offers several options as parameters.
species -- common name of the species
data -- data frame of ebird or NCBA data
type -- whether to create an interactive plot that supports opening
checklist URLs by clicking on data points in the figure, a non-interactive plot, or a non-interactive plot separated by ecoregion.
pallet -- specify an RColorBrewer pallet (multiple colors), or a single
color (name or hex) for the figure.
omit_codes -- specify evidence codes not be plotted.
lump -- an option to lump breeding codes into fewer categories.
drop -- TRUE or FALSE whether to include unreported codes in the plot
# Function Definition
```{r}
breeding_boxplot
```
# Usage
Identify a species to investigate.
```{r}
species <- "Acadian Flycatcher"
print(species)
```
shiny::runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/NCBA/shinyapp')
runApp('C:/Users/skanderson/State of North Carolina/WRC_NC Bird Atlas - Documents/Science Subcommittee/data_management/NCBA/shinyapp')
shiny::runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp')
shiny::runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp()
runApp()
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp()
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
View(get_spp_by_block)
View(get_spp_by_block)
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp()
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
shiny::runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
library(mongolite)
USER <- "wd_shiny_public"
PASS <- "phalacrocoraxauritis"
HOST = "cluster0-shard-00-00.rzpx8.mongodb.net:27017"
WAP_URI = sprintf(
paste0("mongodb://%s:%s@%s/%s?authSource=admin&replicaSet=",
"atlas-3olgg1-shard-0&readPreference=primary&ssl=true"),
USER,
PASS,
HOST,
"conservation_connections")
mv <- mongo(
"verticies",
url = WAP_URI,
options = ssl_options(weak_cert_validation = T)
)
pipeline <- sprintf(
'[{ "$match": { "type": "%s" }}, { "$project": { "name" : "$title"}}]',
"Habitat"
)
test<-mv$aggregate(pipeline)
test
print(test)
mv$find({})
mv$find("{}","{}")
mv <- mongo(
"vertices",
url = WAP_URI,
options = ssl_options(weak_cert_validation = T)
)
mv$find("{}","{}")
test<-mv$aggregate(pipeline)
pipeline
pipeline <- sprintf(
'[{ "$match": { "type": "%s" }}, { "$project": { "title" : 1}}]',
"Habitat"
)
test<-mv$aggregate(pipeline)
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp()
runApp()
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp()
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp()
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
runApp()
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@wd_data_mgmt/wd_data')
shiny::runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
runApp('C:/Users/skanderson/OneDrive - State of North Carolina/@@ncba/ncba/shinyapp_public')
install.packages("MODISTools")
MODIS::checkTools("GDAL")
install.packages("MODIS")
install.packages("MODIS")
r.version()
version()
R.version.string
install.packages("C:/Users/skanderson/Downloads/MODIS_1.2.11.tar.gz", repos = NULL, type = "source")
install.packages(c("mapdata", "devtools", "mapedit", "ptw"))
install.packages("C:/Users/skanderson/Downloads/MODIS_1.2.11.tar.gz", repos = NULL, type = "source")
install.packages(c("mapdata", "devtools", "mapedit", "ptw"))
install.packages("C:/Users/skanderson/Downloads/MODIS_1.2.11.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/skanderson/Downloads/MODIS_1.2.11.tar.gz", repos = NULL, type = "source")
install.packages("C:/Users/skanderson/Downloads/MODIS_1.2.3.tar.gz", repos = NULL, type = "source")
install.packages("raster")
install.packages("terra")
install.packages(winLibs)
install.packages(units)
install.packages("units")
install.packages("terra")
install.packages("winlibs")
install.packages("units")
install.packages("terra")
install.packages(c("askpass", "auk", "brio", "bslib", "classInt", "cli", "cpp11", "crosstalk", "cyclocomp", "data.table", "dbplyr", "deldir", "desc", "digest", "dplyr", "DT", "e1071", "ebirdst", "evaluate", "fansi", "fontawesome", "fs", "gargle", "gdtools", "geojson", "geojsonio", "ggiraph", "ggmap", "ggplot2", "ggrepel", "googlePolylines", "gtable", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "interp", "jqr", "jsonlite", "knitr", "labeling", "languageserver", "later", "leafem", "leaflet", "leaflet.providers", "lifecycle", "lintr", "lubridate", "maps", "markdown", "mongolite", "openssl", "packrat", "pingr", "pkgload", "plotly", "plyr", "polyclip", "precrec", "prettyunits", "processx", "progress", "promises", "protolite", "purrr", "R.utils", "ragg", "raster", "Rcpp", "RcppEigen", "readxl", "rematch", "remotes", "RgoogleMaps", "rlang", "rmarkdown", "rnaturalearth", "rprojroot", "rsconnect", "RSQLite", "rstudioapi", "s2", "sass", "scales", "sf", "shiny", "shinyWidgets", "sp", "spatstat.data", "spatstat.geom", "spatstat.random", "spatstat.utils", "splancs", "stars", "stringi", "stringr", "styler", "systemfonts", "terra", "testthat", "textshaping", "tinytex", "tmap", "utf8", "uuid", "V8", "vctrs", "viridis", "vroom", "waffle", "waldo", "withr", "wk", "xfun", "XML", "xml2", "yaml"))
install.packages(c("askpass", "auk", "brio", "bslib", "classInt", "cli", "cpp11", "crosstalk", "cyclocomp", "data.table", "dbplyr", "deldir", "desc", "digest", "dplyr", "DT", "e1071", "ebirdst", "evaluate", "fansi", "fontawesome", "fs", "gargle", "gdtools", "geojson", "geojsonio", "ggiraph", "ggmap", "ggplot2", "ggrepel", "googlePolylines", "gtable", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "interp", "jqr", "jsonlite", "knitr", "labeling", "languageserver", "later", "leafem", "leaflet", "leaflet.providers", "lifecycle", "lintr", "lubridate", "maps", "markdown", "mongolite", "openssl", "packrat", "pingr", "pkgload", "plotly", "plyr", "polyclip", "precrec", "prettyunits", "processx", "progress", "promises", "protolite", "purrr", "R.utils", "ragg", "raster", "Rcpp", "RcppEigen", "readxl", "rematch", "remotes", "RgoogleMaps", "rlang", "rmarkdown", "rnaturalearth", "rprojroot", "rsconnect", "RSQLite", "rstudioapi", "s2", "sass", "scales", "sf", "shiny", "shinyWidgets", "sp", "spatstat.data", "spatstat.geom", "spatstat.random", "spatstat.utils", "splancs", "stars", "stringi", "stringr", "styler", "systemfonts", "terra", "testthat", "textshaping", "tinytex", "tmap", "utf8", "uuid", "V8", "vctrs", "viridis", "vroom", "waffle", "waldo", "withr", "wk", "xfun", "XML", "xml2", "yaml"))
install.packages(c("askpass", "auk", "brio", "bslib", "classInt", "cli", "cpp11", "crosstalk", "cyclocomp", "data.table", "dbplyr", "deldir", "desc", "digest", "dplyr", "DT", "e1071", "ebirdst", "evaluate", "fansi", "fontawesome", "fs", "gargle", "gdtools", "geojson", "geojsonio", "ggiraph", "ggmap", "ggplot2", "ggrepel", "googlePolylines", "gtable", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "interp", "jqr", "jsonlite", "knitr", "labeling", "languageserver", "later", "leafem", "leaflet", "leaflet.providers", "lifecycle", "lintr", "lubridate", "maps", "markdown", "mongolite", "openssl", "packrat", "pingr", "pkgload", "plotly", "plyr", "polyclip", "precrec", "prettyunits", "processx", "progress", "promises", "protolite", "purrr", "R.utils", "ragg", "raster", "Rcpp", "RcppEigen", "readxl", "rematch", "remotes", "RgoogleMaps", "rlang", "rmarkdown", "rnaturalearth", "rprojroot", "rsconnect", "RSQLite", "rstudioapi", "s2", "sass", "scales", "sf", "shiny", "shinyWidgets", "sp", "spatstat.data", "spatstat.geom", "spatstat.random", "spatstat.utils", "splancs", "stars", "stringi", "stringr", "styler", "systemfonts", "terra", "testthat", "textshaping", "tinytex", "tmap", "utf8", "uuid", "V8", "vctrs", "viridis", "vroom", "waffle", "waldo", "withr", "wk", "xfun", "XML", "xml2", "yaml"))
install.packages(c("askpass", "auk", "brio", "bslib", "classInt", "cli", "cpp11", "crosstalk", "cyclocomp", "data.table", "dbplyr", "deldir", "desc", "digest", "dplyr", "DT", "e1071", "ebirdst", "evaluate", "fansi", "fontawesome", "fs", "gargle", "gdtools", "geojson", "geojsonio", "ggiraph", "ggmap", "ggplot2", "ggrepel", "googlePolylines", "gtable", "haven", "htmltools", "htmlwidgets", "httpuv", "httr", "interp", "jqr", "jsonlite", "knitr", "labeling", "languageserver", "later", "leafem", "leaflet", "leaflet.providers", "lifecycle", "lintr", "lubridate", "maps", "markdown", "mongolite", "openssl", "packrat", "pingr", "pkgload", "plotly", "plyr", "polyclip", "precrec", "prettyunits", "processx", "progress", "promises", "protolite", "purrr", "R.utils", "ragg", "raster", "Rcpp", "RcppEigen", "readxl", "rematch", "remotes", "RgoogleMaps", "rlang", "rmarkdown", "rnaturalearth", "rprojroot", "rsconnect", "RSQLite", "rstudioapi", "s2", "sass", "scales", "sf", "shiny", "shinyWidgets", "sp", "spatstat.data", "spatstat.geom", "spatstat.random", "spatstat.utils", "splancs", "stars", "stringi", "stringr", "styler", "systemfonts", "terra", "testthat", "textshaping", "tinytex", "tmap", "utf8", "uuid", "V8", "vctrs", "viridis", "vroom", "waffle", "waldo", "withr", "wk", "xfun", "XML", "xml2", "yaml"))
version
install.packages(c("BH", "brew", "DBI", "digest", "glue", "leaflegend", "Rcpp", "readr", "reprex", "rlang", "roxygen2", "shinyWidgets", "terra"))
install.packages(c("BH", "brew", "DBI", "digest", "glue", "leaflegend", "Rcpp", "readr", "reprex", "rlang", "roxygen2", "shinyWidgets", "terra"))
install.packages("igraph")
lete list with
library(igraph)
# Create data
data <- matrix(sample(0:1, 400, replace=TRUE, prob=c(0.8,0.2)), nrow=20)
network <- graph_from_adjacency_matrix(data , mode='undirected', diag=F )
# When ploting, we can use different layouts:
par(mfrow=c(2,2), mar=c(1,1,1,1))
plot(network, layout=layout.sphere, main="sphere")
plot(network, layout=layout.circle, main="circle")
plot(network, layout=layout.random, main="random")
plot(network, layout=layout.fruchterman.reingold, main="fruchterman.reingold")
# See the complete list with
# help(layout)
g <- make_graph(~ Alice-Bob:Claire:Frank, Claire-Alice:Dennis:Frank:Esther,
George-Dennis:Frank, Dennis-Esther)
plot(g)
V(g)$age <- c(25, 31, 18, 23, 47, 22, 50)
V(g)$gender <- c("f", "m", "f", "m", "m", "f", "m")
E(g)$is_formal <- c(FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE)
summary(g)
g <- make_graph(~ Alice-Bob:Claire:Frank, Claire-Alice:Dennis:Frank:Esther,
George-Dennis:Frank, Dennis-Esther) %>%
set_vertex_attr("age", value = c(25, 31, 18, 23, 47, 22, 50)) %>%
set_vertex_attr("gender", value = c("f", "m", "f", "m", "m", "f", "m")) %>%
set_edge_attr("is_formal", value = c(FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE))
summary(g)
plot(g)
g <- make_graph(~ Alice-Bob:Claire:Frank, Claire-Alice:Dennis:Frank:Esther,
George-Dennis:Frank, Dennis-Esther) %>%
set_vertex_attr("age", value = c(25, 31, 18, 23, 47, 22, 50)) %>%
set_vertex_attr("gender", value = c("f", "m", "f", "m", "m", "f", "m")) %>%
set_edge_attr("is_formal", value = c(FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE))
summary(g)
plot(g)
install.packages(c("digest", "glue", "httpuv", "otp", "ps", "R.oo", "Rcpp", "rlang", "roxygen2", "rsconnect", "sp", "terra", "timechange", "uuid", "viridis"))
install.packages("digest")
install.packages("glue")
install.packages("pandoc")
setwd("C:/Users/skanderson/OneDrive - State of North Carolina/@@bird_files/wiki/Conservation-Connections/wrc_knowledge_graph")
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
